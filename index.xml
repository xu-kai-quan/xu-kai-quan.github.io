<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>小徐的博客</title>
    <link>https://xkq-blog.top/</link>
    <description>Recent content on 小徐的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Sun, 24 Jan 2021 11:54:50 +0800</lastBuildDate><atom:link href="https://xkq-blog.top/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>线程的生命周期和状态转换</title>
      <link>https://xkq-blog.top/posts/%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Sun, 24 Jan 2021 11:54:50 +0800</pubDate>
      
      <guid>https://xkq-blog.top/posts/%E7%BA%BF%E7%A8%8B%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%92%8C%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2/</guid>
      <description>线程的生命周期可以分为5个阶段:
 新建状态（New） 就绪状态(Runnable) 运行状态(Running) 阻塞状态(Blocked) 终止状态(Terminated)  1.新建状态(New) 当创建一个线程对象后,该线程对象就处于新建状态,仅仅是由Java虚拟机为其分配了内存。
2.就绪状态(Runnable) 当线程对象调用了start() 方法后,该线程就进入了就绪状态。此时具备了运行的条件,但要等待系统调度后,才能获得CPU的使用权并开始运行。
3.运行状态(Running) 如果处于就绪状态的线程获得了CPU的使用权 ，并开始执行run()方法，则该线程处于运行状态。当运行状态的线程使用完 系统分配的时间后，系统就会剥夺该线程占用的CPU资源，让其他线程获得执行的机会。
4.阻塞状态(Blocked) 一个正在执行的线程在某些特殊情况下，如被挂起或执行耗时的I/O操作时，会让出CPU的使用权 并暂时中止自己的运行，进入阻塞状态。只有当引起阻塞的原因消失后，线程才可以转入就绪状态。
举例线程由运行状态转换成阻塞状态的原因   当线程试图获取某个对象的同步锁 时，如果该锁被其他线程所持有，则当前线程会进入阻塞状态。必须要获取到其他线程所持有的锁 ,才可以进入就绪状态。
  当线程调用了一个阻塞式的IO方法 时，该线程就会进入阻塞状态。等这个阻塞的IO方法返回 时,才可以进入就绪状态
  当线程调用了某个对象的wait() 方法时，该线程进入阻塞状态。需要使用notify() 方法唤醒该进程,才可以进入就绪状态
  当线程调用了Thread的sleep() 方法时，该线程进入阻塞状态。等到线程的睡眠时间到了 以后，才可以进入就绪状态
  当在一个进程调用了另一个进程的join() 方法时，该进程进入阻塞状态。需要等新加入的线程运行结束 后，才可以进入就绪状态
  终止状态(Terminated) 当线程调用stop()方法 或run()方法 正常运行完毕，或线程抛出 一个未捕获的异常、错误，该线程就进入终止状态。</description>
    </item>
    
    <item>
      <title>Collection体系的常用类及其背后的数据结构</title>
      <link>https://xkq-blog.top/posts/collection%E4%BD%93%E7%B3%BB%E7%9A%84%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%8F%8A%E5%85%B6%E8%83%8C%E5%90%8E%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Sun, 10 Jan 2021 13:58:25 +0800</pubDate>
      
      <guid>https://xkq-blog.top/posts/collection%E4%BD%93%E7%B3%BB%E7%9A%84%E5%B8%B8%E7%94%A8%E7%B1%BB%E5%8F%8A%E5%85%B6%E8%83%8C%E5%90%8E%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description>概念 集合是特殊的类，它可以存储任意类型的对象，并且长度可变。 集合按照存储结构可以分为两大类，即单列集合Collection和双列集合Map。
  Collection是单列集合类的根接口，它有两个子接口，分别是List和Set。List是特点是元素有序、可重复。Set的接口是元素无序、不可重复。 List接口的主要实现类有ArrayList和LinkedList，Set接口的主要实现类有HashSet和TreeSet。
  Map是双列集合类的根接口，用于存储Key、Value映射关系的元素。主要实现类有HashMap和TreeMap。Map中的Set keySet()方法，返回映射中包含键的Set视图，但并不是独立于Map的，keySet的背后还是Map，修改keySet的值，Map也会相应改变。
  Collection子接口 List   ArrayList内部封装了一个长度可变的数组，当存入的元素超过数组长度时，ArrayList会在内存中分配一个更大的数组，然后把原有的所有元素拷贝过去，因此可以将ArrayList集合看作是一个长度可变的数组。适合用来查找元素，不适合做大量的增、删操作。
  LinkedList内部维护了一个双向循环列表，对于元素的增、删操作具有很高的效率
  Set   HashSet根据对象的哈希(单向的映射)值来确定元素在集合中的存储位置，具有良好的存取和查找性能。
Java世界第一重要约定：判断是否重复用的是equals()方法。
Java世界第二重要约定：同一个对象必须始终返回相同的hashCode。
当向HashSet集合中添加一个对象时，首先会调用该对象的hashCode()方法计算对象的哈希值，从而确定元素的存储位置。如果该位置上没有元素，则直接将元素存入，如果该位置上有元素存在，则会调用equals()方法让当前存入的元素依次和该位置上的元素进行比较，如果返回的结果为false就将该元素存入集合，如果返回的结果为true则说明有重复元素，就将该元素舍弃。
LinkedHashSet是HashSet的子类，使用双向链表来维护内部元素的关系，内部的顺序与存入的顺序一致。
  TreeSet是以红黑树的方式来存储元素，可以对集合中的元素进行排序，使用Comparable约定，实现快速的查找和插入操作。
  Map接口   HashMap在Java7+后从链表转向红黑树(一种二叉树，对于每一个根节点，它的每一个右节点都比它小，每一个左节点都比它大)来实现。 HashMap不会出现重复的键，如果存储了相同的键，后存储的值会覆盖原有的值。内部的顺序与存入的顺序不一致。HashMap的线程不安全，可能会出现死循环。在多线程时应用concurrentHashMap
LinkedHashMap是HashMap的子类，使用双向链表来维护内部元素的关系，内部的顺序与存入的顺序一致。
  TreeMap是以红黑树的方式来存储元素，可以对集合中的元素进行排序，使用Comparable约定，实现快速的查找和插入操作。
  </description>
    </item>
    
    <item>
      <title>初识Maven</title>
      <link>https://xkq-blog.top/posts/%E5%88%9D%E8%AF%86maven/</link>
      <pubDate>Wed, 23 Dec 2020 09:58:33 +0800</pubDate>
      
      <guid>https://xkq-blog.top/posts/%E5%88%9D%E8%AF%86maven/</guid>
      <description>什么是Maven Maven被翻译为“专家”或“内行”，也可以被翻译成“知识的积累”。Maven是一跨平台的项目管理工具, 主要服务于基于Java平台的项目构建、依赖管理和项目信息管理
什么是构建 在我们每天的工作中，除了编写源代码，还有相当一部分时间用来编译、运行单元测试、生成文档、打包和部署等烦琐的工作上，这就是构建。而Maven使得软件的构建像全自动流水线一样，只需要一条简单的命令，所有烦琐的步骤都能自动完成，帮助我们标准化构建过程。
Maven是优秀的构建工具 Maven是跨平台的，它对外提供一致的操作接口，无论在Windows、Linux或是Mac上，都可以使用同样的命令
我们一直在不停的寻找避免重复的方法。设计的重复、文档的重复、构建的重复，而Maven最大化的消除了构建的重复，抽象了一个完整的构建生命周期模型,并为绝大部分的构建任务提供了已实现的插件，我们也不需要去定义过程和去实现这些过程中的一些任务。
例如测试，我们不用告诉Maven去测试和如何运行测试，我们只需要遵循Maven的约定编写好测试用例，当我们构建的时候，这些测试会自动运行。
Maven不仅仅是构建工具 还是一个依赖管理工具和项目信息管理工具。
依赖管理工具 在这个开源的年代里，几乎任何Java应用都会借用一些第三方的开源类库，这些类库都可通过依赖的方式引入到项目中来。随着依赖的增多，版本不一致、版本冲突、依赖臃肿等问题接踵而来。如果手动解决，那将是十分枯燥的。
幸运的是Maven提供了一个优秀的解决方案。Maven为全世界的Java开发者提供了一个免费的中央仓库，在其中几乎可以找到任何的流行开源类库，通过一组坐标Maven能找到任何一个Java类库（如jar文件）并自动下载。
 Maven给这个类库世界引入了经纬，让它们变得有秩序，于是我们借助它来有序地管理依赖，轻松的解决那些繁杂的依赖问题。
 项目信息管理工具 Mavne能帮助我们管理原本分散在项目中各个角落的项目信息，包括项目描述、开发者列表、版本控制系统地址、许可证、缺陷管理系统地址等。
通过Mavne自动生成的站点和一些已有的插件，我们还能轻松获得项目文档、测试报告、静态分析报告、源码版本日志报告等非常具有价值的项目信息。
使用Mavne的额外好处  Mavne对于项目目录结构、测试用例命名方式等内容都有既定的规则，只要遵循了这些成熟的规则，用户在项目间切换的时候就免去了额外的学习成本，可以说是约定优于配置（Convention Over Configuration）
 </description>
    </item>
    
    <item>
      <title>Windows如何用 hugo 搭建个人博客</title>
      <link>https://xkq-blog.top/posts/windows%E5%A6%82%E4%BD%95%E7%94%A8-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Tue, 22 Dec 2020 20:31:10 +0800</pubDate>
      
      <guid>https://xkq-blog.top/posts/windows%E5%A6%82%E4%BD%95%E7%94%A8-hugo-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>在Windows中安装hugo   去 Hugo releases页面下载 hugo_xxx_Windows-64bit.zip
  解压后把文件夹名改为 hugo ，在D盘新建 Software 文件夹，把 hugo 文件夹放到里面
  把 D:\Software\hugo\ 加到环境变量 PATH 中
  运行 hugo version 查看版本 （如果这一步不成功，那一定是2，3步没有弄好）
  搭建博客   进入Hugo官网
  从 Step 2 开始看，因为 Step 1 是安装 hugo ，不过文档给的安装方式是是 macOS 的，所以不用看。
  先进入一个安全目录（存放你的博客），然后执行 Step 2里的 hugo new site quickstart，这里的quickstart 建议换成 你的github名字.github.io_generator (现在，假设我的github名字是XXX)
  如果你听从了我的建议，那么接下来一个一个的运行下面的命令
  cd XXX.github.io_generator git init git submodule add https://github.</description>
    </item>
    
    <item>
      <title>开博大吉</title>
      <link>https://xkq-blog.top/posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</link>
      <pubDate>Tue, 22 Dec 2020 16:48:33 +0800</pubDate>
      
      <guid>https://xkq-blog.top/posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</guid>
      <description>大家好 我的博客开通了，希望我能写出好文章给大家看。</description>
    </item>
    
  </channel>
</rss>
